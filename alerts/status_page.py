import os
import logging
from datetime import datetime

logger = logging.getLogger('iptic-watcher.alerts.status_page')

def send_alert(system, host, message):
    """
    Update an HTML status page with the current system status.
    
    Args:
        system (str): Name of the system that's down or recovered
        host (str): Hostname or IP that was checked
        message (str): Alert message to send
    
    Returns:
        bool: True if status page was updated successfully, False otherwise
    """
    # Get status page path from environment variable or use default
    status_page_path = os.environ.get('IPTIC_STATUS_PAGE', './status.html')
    
    # Determine system status
    if "DOWN" in message:
        status = "DOWN"
        status_class = "down"
        logger.debug(f"Recording DOWN status for {system} ({host})")
    elif "RECOVERED" in message or "UP" in message:
        status = "UP"
        status_class = "up"
        logger.debug(f"Recording UP status for {system} ({host})")
    else:
        status = "UNKNOWN"
        status_class = "unknown"
        logger.debug(f"Recording UNKNOWN status for {system} ({host})")
    
    try:
        # Create or update the status page
        systems = {}
        
        # Try to read existing status page
        if os.path.exists(status_page_path):
            try:
                with open(status_page_path, 'r') as f:
                    content = f.read()
                    # Extract system statuses from existing file using a simple parsing approach
                    import re
                    matches = re.findall(r'<tr>\s*<td>(.*?)</td>\s*<td>(.*?)</td>\s*<td class="(.*?)">(.*?)</td>\s*<td>(.*?)</td>', content)
                    for match in matches:
                        sys_name, sys_host, sys_class, sys_status, sys_time = match
                        if sys_name != system:  # Only keep systems that aren't being updated
                            systems[sys_name] = {
                                'host': sys_host,
                                'status': sys_status,
                                'status_class': sys_class,
                                'time': sys_time
                            }
                logger.debug(f"Read existing status page with {len(systems)} systems")
            except Exception as e:
                logger.warning(f"Could not parse existing status page, creating new one: {e}")
        
        # Update or add current system
        systems[system] = {
            'host': host,
            'status': status,
            'status_class': status_class,
            'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # Generate HTML
        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>IPTIC Watcher - System Status</title>
    <meta http-equiv="refresh" content="60">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1 {{ color: #333; }}
        table {{ border-collapse: collapse; width: 100%; }}
        th, td {{ text-align: left; padding: 8px; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f2f2f2; }}
        .up {{ color: green; font-weight: bold; }}
        .down {{ color: red; font-weight: bold; }}
        .unknown {{ color: orange; font-weight: bold; }}
        .footer {{ color: #777; font-size: 0.8em; margin-top: 20px; }}
    </style>
</head>
<body>
    <h1>IPTIC Watcher - System Status</h1>
    <p>Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    <table>
        <tr>
            <th>System</th>
            <th>Host</th>
            <th>Status</th>
            <th>Last Change</th>
        </tr>
"""
        
        # Add rows for each system
        for sys_name, sys_info in systems.items():
            html += f"""        <tr>
            <td>{sys_name}</td>
            <td>{sys_info['host']}</td>
            <td class="{sys_info['status_class']}">{sys_info['status']}</td>
            <td>{sys_info['time']}</td>
        </tr>
"""
        
        # Close HTML
        html += """    </table>
    <div class="footer">
        Generated by IPTIC Watcher
    </div>
</body>
</html>
"""
        
        # Create directory if needed
        os.makedirs(os.path.dirname(os.path.abspath(status_page_path)), exist_ok=True)
        
        # Write status page
        with open(status_page_path, 'w') as f:
            f.write(html)
        
        logger.info(f"Status page updated successfully at {status_page_path}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to update status page: {e}")
        return False